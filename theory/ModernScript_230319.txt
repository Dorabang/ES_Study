## ModernScript

    - Spread 구문(Spread Syntax) : 여러 개의 값을 하나로 묶은 배열을 각각의 개별 값으로 펼쳐주는 문법

        · 배열을 다룰 때 유용하게 활용 가능함

            const numbers = [1, 2, 3];

            console.log(...numbers); // 1, 2, 3
            console.log(1, 2, 3); // 1, 2, 3

            → Rest Parameter와 유사하게 생겼지만 사용 목적이 반대되므로 잘 구별하여 사용할 것

                const numbers = [1, 2, 3];

                console.log(...numbers); // 1, 2, 3
                console.log(1, 2, 3); // 1, 2, 3

                const sumAll = (...args) => {
                    let sum = 0;
                    for (arg of args) {
                        sum += arg;
                    }
                    return sum;
                };

                console.log(sumAll(1, 2, 3, 4)); // 10

        
        · Spread 구문 활용 (배열 복사)

            → 기존 배열 복사 시에서는 아래처럼 사용할

                const webPublishing = ["HTML", "CSS"];
                const interactiveWeb = webPublishing.slice();

                interactiveWeb.push("JavaScript");

                console.log(webPublishing); // ["HTML", "CSS"]
                console.log(interactiveWeb); // ["HTML", "CSS", "JavaScript"]


            → Spread 구문을 활용하게 되면 간편하게 해결가능

                const webPublishing = ["HTML", "CSS"];
                const interactiveWeb = [...webPublishing];

                interactiveWeb.push("JavaScript");

                console.log(webPublishing); // ["HTML", "CSS"]
                console.log(interactiveWeb); // ["HTML", "CSS", "JavaScript"]


            →  요소를 추가할 수 있어 더욱 더 직관적이고 간단함

                const webPublishing = ["HTML", "CSS"];
                const interactiveWeb = [...webPublishing, "JavaScript"];

                console.log(webPublishing); // ["HTML", "CSS"]
                console.log(interactiveWeb); // ["HTML", "CSS", "JavaScript"]
            

            →  여러 배열을 합칠 때 사용함(concat 메소드를 사용할 수 있지만 Spread 구문이 더 직관적)
            
                const arr1 = [1, 2, 3];
                const arr2 = [4, 5, 6];

                const arr3 = [...arr1, ...arr2];
                console.log(arr3); // [1, 2, 3, 4, 5, 6]

                const arr4 = arr1.concat(arr2);
                console.log(arr4); // [1, 2, 3, 4, 5, 6]


            →  함수 호출 시 Argument로 활용가능
                
                const introduce = (name, birth, job) => {
                    console.log("안녕하세요! 반갑습니다.");
                    console.log(`저는 ${name}입니다.`);
                    console.log(`${birth}년 생이고,`);
                    console.log(`직업은 ${job}입니다.`);
                    console.log("잘 부탁드립니다.");
                };

                const myArr = ["코드잇", 2017, "프로그래밍 강사"];
                introduce(...myArr); // 배열을 펼쳐서 각각의 아규먼트로 전달

                ※ Spread 구문 자체는 값이 아님, 하나로 묶인 값을 펼쳐냈기 때문에 여러 값의 목록으로 평가됨
                   (하나의 값만 담긴 배열을 펼쳐낼 시에는 오류 발생)

                    const numbers = [1];

                    const number = ...numbers; // SyntaxError


            →  배열을 펼쳐 객체에 담기(index가 property-name이 되어서 객체 생성)
                            
                const members = ["태호", "종훈", "우재"];

                const newObject = { ...members };

                console.log(newObject); // {0:"태호",1:"종훈",2:"우재"}


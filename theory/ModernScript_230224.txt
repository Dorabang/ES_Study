## ModernScript

    - 변수와 스코프
       var x; // 함수 스코프(function scope)
       let y; // 블럭 스코프(block scope)
       const z; // 블럭 스코프(block scope)



    - 함수를 만드는 방법
        · 함수 선언
            function 함수명(parameter) {
                동작
                return 리턴값
            }

            → 함수 선언 전에 함수를 호출해도(호이스팅) 문제없이 호출됨
            
            function printCodeit() {
                function printJS() {
                    console.log('JavaScript');
                }
                    console.log('Codeit');
                    printJS();
            }

            printCodeit();
            printJS(); // ReferenceError

            → 함수 안에서 선언된 함수는 밖에서 호출할 수 없다.
            → 함수 외에 코드블럭에서 선언된 함수는 전역적으로 밖에서 호출할 수 있다.
            → 함수와 변수의 구분과 자유로운 위치에서 함수 호출이 용이함


        · 함수 표현식
            const printCodeit = function () {
                console.log('Codeit');
            };

            printCodeit(); // Codeit

            → 위 예시처럼 함수를 선언하는 방식을 함수 표현식이라고 함,
            함수 표현식은 변수에 함수를 할당하는 것만이 아니라,
            함수를 값처럼 표현하였을 때 모두 '함수 표현식'이라고 지칭함
            → 함수 표현식은 변수 선언 전에 함수 호출 시 에러 발생(ReferenceError)
            → 함수 표혁식은 변수의 스코프에 따라 스코프가 달라진다.
            → 반드시 선언 이후에 호출할 수 있어 가독성이 높고 변수의 스코프도 활용할 수 있음



        · 재귀 함수(Recursive function)
            : 자기 자신을 부르는 함수
                let countdown = function(n) {
                    console.log(n);
                    if (n === 0) {
                        console.log('End!');
                    } else {
                    countdown(n - 1);
                    }
                };

                let myFunction = countdown;

                countdown = null;

                myFunction(5); // TypeError

            → 이 함수를 복사하려고 다른 변수에 똑같이 담았다가,
            countdown 변수에 담긴 값이 변하게 되면 문제 발생



        · 기명 함수 표현식
            : 이름이 있는 함수 표현식
                let countdown = function printCountdown(n) {
                    console.log(n);
                    if (n === 0) {
                        console.log('End!');
                    } else {
                        printCountdown(n - 1);
                    }
                };

                let myFunction = countdown;

                countdown = null;

                myFunction(5); // 정상적으로 동작

            → 함수 내부에서 함수 자신을 사용하려고 하면
            함수표현식에서는 반드시 기명 함수 표현식을 사용하는 것이 좋다

        
        · 즉시 실행 함수(IIFE, Immediately Invoked Function Expression)
            : 함수 선언과 동시에 즉시 실행되는 함수

            (function () {
                console.log('Hi!');
            })();

            → 함수에 이름을 지어주더라도 외부에서 재사용할 수 없다
            → 선언과 동시에 실행이 이뤄져, 일반적으로 프로그램 초기화 기능에 많이 활용,
            혹은 재사용이 필요 없는, 일회성 동작을 구성할 때 활용(함수의 리턴값을 바로 변수에 할당하고 싶을 때)



    - 값으로서의 함수 : 일급 함수(First Class Function)
        · 콜백 함수(Callback Function)
            : 다른 함수에 파라미터로 들어간 함수

                function makeQuiz(quiz, answer, success, fail) {
                    if (prompt(quiz) === answer) {
                        console.log(success()); // 정답!
                    } else {
                        console.log(fail()); // 오답!
                    }
                };

                function getSuccess() {
                    return '정답!';
                }

                function getFail() {
                    return '오답!';
                }

                const question = '5 + 3 = ?';

                makeQuiz(question, '8', getSuccess, getFail);
        

        · 고차 함수(Higher Order Function)
            : 함수를 리턴하는 함수

                function getPrintHi() {
                    return function () {
                        console.log('Hi!?');
                    };
                }

                // const sayHi = getPrintHi();
                // sayHi();

                getPrintHi()(); // 이와 같이 고차함수를 바로 실행할 수 있다.
